{
  "address": "0x4e7cACeE6D75BF7F63A44331a5C3D6AA1b57B634",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_attestationStation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumAttestationScore",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_gnosisSafe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "charity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "CampaignCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CampaignFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "charity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "eligible",
          "type": "bool"
        }
      ],
      "name": "CharityEligibilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "origin",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Donated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "interchainGasPaymaster",
          "type": "address"
        }
      ],
      "name": "InterchainGasPaymasterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "InterchainSecurityModuleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mailbox",
          "type": "address"
        }
      ],
      "name": "MailboxSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FINANCIAL_STATEMENTS_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MISSION_STATEMENT_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRATION_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAX_EXEMPT_STATUS_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attestationStation",
      "outputs": [
        {
          "internalType": "contract IAttestationStation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "campaigns",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "charity",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "charityScores",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charity",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "createCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interchainGasPaymaster",
      "outputs": [
        {
          "internalType": "contract IInterchainGasPaymaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interchainSecurityModule",
      "outputs": [
        {
          "internalType": "contract IInterchainSecurityModule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charity",
          "type": "address"
        }
      ],
      "name": "isCharityEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailbox",
      "outputs": [
        {
          "internalType": "contract IMailbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumAttestationScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextCampaignId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_interchainGasPaymaster",
          "type": "address"
        }
      ],
      "name": "setInterchainGasPaymaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        }
      ],
      "name": "setInterchainSecurityModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mailbox",
          "type": "address"
        }
      ],
      "name": "setMailbox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumAttestationScore",
          "type": "uint256"
        }
      ],
      "name": "setMinimumAttestationScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charity",
          "type": "address"
        }
      ],
      "name": "updateCharityScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd1c46ff144661f3b3752cc4d513e9d0654fa56777b6a1736f49bdcc8714e289e",
  "receipt": {
    "to": null,
    "from": "0x6860542E55Fb9292e4c8b478FcEec724d3351C2e",
    "contractAddress": "0x4e7cACeE6D75BF7F63A44331a5C3D6AA1b57B634",
    "transactionIndex": 88,
    "gasUsed": "1497332",
    "logsBloom": "0x
    "blockHash": "0xe3c9a39e83e42ade9c1a1b3e5edda3114d1f8641e2f6a3a1dcbabb2c17fbd61e",
    "transactionHash": "0xd1c46ff144661f3b3752cc4d513e9d0654fa56777b6a1736f49bdcc8714e289e",
    "logs": [
      {
        "transactionIndex": 88,
        "blockNumber": 40762433,
        "transactionHash": "0xd1c46ff144661f3b3752cc4d513e9d0654fa56777b6a1736f49bdcc8714e289e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006860542e55fb9292e4c8b478fceec724d3351c2e",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001f9cd6db9f6b1c000000000000000000000000000000000000000000000000ac7d5614e60ab21f00000000000000000000000000000000000000000001f5412b278e4b9ce18f0d000000000000000000000000000000000000000000000000ac5db93e0a6b470300000000000000000000000000000000000000000001f5412b472b227880fa29",
        "logIndex": 392,
        "blockHash": "0xe3c9a39e83e42ade9c1a1b3e5edda3114d1f8641e2f6a3a1dcbabb2c17fbd61e"
      }
    ],
    "blockNumber": 40762433,
    "cumulativeGasUsed": "28210902",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc4eA30bA18593af366D66Bc11ac36f9e37552B8e",
    50,
    "0x9f24e4bc9c4f609706a14ea154b4504c02889c97",
    "0x4aB59d8D18298261560aFcAf780E17Dc69B877d0"
  ],
  "numDeployments": 1,
  "solcInputHash": "d7acc25fc82b3040f2794745255185d7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_attestationStation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumAttestationScore\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gnosisSafe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CampaignFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"}],\"name\":\"CharityEligibilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"interchainGasPaymaster\",\"type\":\"address\"}],\"name\":\"InterchainGasPaymasterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"InterchainSecurityModuleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mailbox\",\"type\":\"address\"}],\"name\":\"MailboxSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FINANCIAL_STATEMENTS_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSION_STATEMENT_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRATION_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX_EXEMPT_STATUS_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attestationStation\",\"outputs\":[{\"internalType\":\"contract IAttestationStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"charity\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"charityScores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charity\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"createCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainGasPaymaster\",\"outputs\":[{\"internalType\":\"contract IInterchainGasPaymaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainSecurityModule\",\"outputs\":[{\"internalType\":\"contract IInterchainSecurityModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charity\",\"type\":\"address\"}],\"name\":\"isCharityEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"contract IMailbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAttestationScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCampaignId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interchainGasPaymaster\",\"type\":\"address\"}],\"name\":\"setInterchainGasPaymaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"setInterchainSecurityModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mailbox\",\"type\":\"address\"}],\"name\":\"setMailbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumAttestationScore\",\"type\":\"uint256\"}],\"name\":\"setMinimumAttestationScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charity\",\"type\":\"address\"}],\"name\":\"updateCharityScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setInterchainGasPaymaster(address)\":{\"params\":{\"_interchainGasPaymaster\":\"The address of the InterchainGasPaymaster contract.\"}},\"setMailbox(address)\":{\"params\":{\"_mailbox\":\"The address of the Mailbox contract.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"InterchainGasPaymasterSet(address)\":{\"notice\":\"Emitted when a new Interchain Gas Paymaster is set.\"},\"MailboxSet(address)\":{\"notice\":\"Emitted when a new mailbox is set.\"}},\"kind\":\"user\",\"methods\":{\"setInterchainGasPaymaster(address)\":{\"notice\":\"Sets the address of the application's InterchainGasPaymaster.\"},\"setMailbox(address)\":{\"notice\":\"Sets the address of the application's Mailbox.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multinate.sol\":\"Multinate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@hyperlane-xyz/core/contracts/HyperlaneConnectionClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {IInterchainGasPaymaster} from \\\"../interfaces/IInterchainGasPaymaster.sol\\\";\\nimport {ISpecifiesInterchainSecurityModule, IInterchainSecurityModule} from \\\"../interfaces/IInterchainSecurityModule.sol\\\";\\nimport {IMailbox} from \\\"../interfaces/IMailbox.sol\\\";\\n\\n// ============ External Imports ============\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract HyperlaneConnectionClient is\\n    OwnableUpgradeable,\\n    ISpecifiesInterchainSecurityModule\\n{\\n    // ============ Mutable Storage ============\\n\\n    IMailbox public mailbox;\\n    // Interchain Gas Paymaster contract. The relayer associated with this contract\\n    // must be willing to relay messages dispatched from the current Mailbox contract,\\n    // otherwise payments made to the paymaster will not result in relayed messages.\\n    IInterchainGasPaymaster public interchainGasPaymaster;\\n\\n    IInterchainSecurityModule public interchainSecurityModule;\\n\\n    uint256[48] private __GAP; // gap for upgrade safety\\n\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new mailbox is set.\\n     * @param mailbox The address of the mailbox contract\\n     */\\n    event MailboxSet(address indexed mailbox);\\n\\n    /**\\n     * @notice Emitted when a new Interchain Gas Paymaster is set.\\n     * @param interchainGasPaymaster The address of the Interchain Gas Paymaster.\\n     */\\n    event InterchainGasPaymasterSet(address indexed interchainGasPaymaster);\\n\\n    event InterchainSecurityModuleSet(address indexed module);\\n\\n    // ============ Modifiers ============\\n\\n    /**\\n     * @notice Only accept messages from an Hyperlane Mailbox contract\\n     */\\n    modifier onlyMailbox() {\\n        require(msg.sender == address(mailbox), \\\"!mailbox\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only accept addresses that at least have contract code\\n     */\\n    modifier onlyContract(address _contract) {\\n        require(Address.isContract(_contract), \\\"!contract\\\");\\n        _;\\n    }\\n\\n    // ======== Initializer =========\\n\\n    function __HyperlaneConnectionClient_initialize(address _mailbox)\\n        internal\\n        onlyInitializing\\n    {\\n        _setMailbox(_mailbox);\\n        __Ownable_init();\\n    }\\n\\n    function __HyperlaneConnectionClient_initialize(\\n        address _mailbox,\\n        address _interchainGasPaymaster\\n    ) internal onlyInitializing {\\n        _setInterchainGasPaymaster(_interchainGasPaymaster);\\n        __HyperlaneConnectionClient_initialize(_mailbox);\\n    }\\n\\n    function __HyperlaneConnectionClient_initialize(\\n        address _mailbox,\\n        address _interchainGasPaymaster,\\n        address _interchainSecurityModule\\n    ) internal onlyInitializing {\\n        _setInterchainSecurityModule(_interchainSecurityModule);\\n        __HyperlaneConnectionClient_initialize(\\n            _mailbox,\\n            _interchainGasPaymaster\\n        );\\n    }\\n\\n    function __HyperlaneConnectionClient_initialize(\\n        address _mailbox,\\n        address _interchainGasPaymaster,\\n        address _interchainSecurityModule,\\n        address _owner\\n    ) internal onlyInitializing {\\n        _setMailbox(_mailbox);\\n        _setInterchainGasPaymaster(_interchainGasPaymaster);\\n        _setInterchainSecurityModule(_interchainSecurityModule);\\n        _transferOwnership(_owner);\\n    }\\n\\n    // ============ External functions ============\\n\\n    /**\\n     * @notice Sets the address of the application's Mailbox.\\n     * @param _mailbox The address of the Mailbox contract.\\n     */\\n    function setMailbox(address _mailbox) external virtual onlyOwner {\\n        _setMailbox(_mailbox);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the application's InterchainGasPaymaster.\\n     * @param _interchainGasPaymaster The address of the InterchainGasPaymaster contract.\\n     */\\n    function setInterchainGasPaymaster(address _interchainGasPaymaster)\\n        external\\n        virtual\\n        onlyOwner\\n    {\\n        _setInterchainGasPaymaster(_interchainGasPaymaster);\\n    }\\n\\n    function setInterchainSecurityModule(address _module)\\n        external\\n        virtual\\n        onlyOwner\\n    {\\n        _setInterchainSecurityModule(_module);\\n    }\\n\\n    // ============ Internal functions ============\\n\\n    /**\\n     * @notice Sets the address of the application's InterchainGasPaymaster.\\n     * @param _interchainGasPaymaster The address of the InterchainGasPaymaster contract.\\n     */\\n    function _setInterchainGasPaymaster(address _interchainGasPaymaster)\\n        internal\\n        onlyContract(_interchainGasPaymaster)\\n    {\\n        interchainGasPaymaster = IInterchainGasPaymaster(\\n            _interchainGasPaymaster\\n        );\\n        emit InterchainGasPaymasterSet(_interchainGasPaymaster);\\n    }\\n\\n    /**\\n     * @notice Modify the contract the Application uses to validate Mailbox contracts\\n     * @param _mailbox The address of the mailbox contract\\n     */\\n    function _setMailbox(address _mailbox) internal onlyContract(_mailbox) {\\n        mailbox = IMailbox(_mailbox);\\n        emit MailboxSet(_mailbox);\\n    }\\n\\n    function _setInterchainSecurityModule(address _module) internal {\\n        require(\\n            _module == address(0) || Address.isContract(_module),\\n            \\\"!contract\\\"\\n        );\\n        interchainSecurityModule = IInterchainSecurityModule(_module);\\n        emit InterchainSecurityModuleSet(_module);\\n    }\\n}\\n\",\"keccak256\":\"0xc98036c26e3084d5233942d0de55ed062337e49d2cdece47e7be1c1c9d046d05\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/interfaces/IInterchainGasPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title IInterchainGasPaymaster\\n * @notice Manages payments on a source chain to cover gas costs of relaying\\n * messages to destination chains.\\n */\\ninterface IInterchainGasPaymaster {\\n    /**\\n     * @notice Emitted when a payment is made for a message's gas costs.\\n     * @param messageId The ID of the message to pay for.\\n     * @param gasAmount The amount of destination gas paid for.\\n     * @param payment The amount of native tokens paid.\\n     */\\n    event GasPayment(\\n        bytes32 indexed messageId,\\n        uint256 gasAmount,\\n        uint256 payment\\n    );\\n\\n    function payForGas(\\n        bytes32 _messageId,\\n        uint32 _destinationDomain,\\n        uint256 _gasAmount,\\n        address _refundAddress\\n    ) external payable;\\n\\n    function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xb9a7223948c3ada4d37b0dd08e1625fb53d102b037a6104f43497d43226889ee\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(bytes calldata _metadata, bytes calldata _message)\\n        external\\n        returns (bool);\\n}\\n\\ninterface ISpecifiesInterchainSecurityModule {\\n    function interchainSecurityModule()\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0xb963aa8eb79d245ff750ec013b467b8a7bced3de5eaad7ea5595967f2ea9a253\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\n\\ninterface IMailbox {\\n    function localDomain() external view returns (uint32);\\n\\n    function dispatch(\\n        uint32 _destinationDomain,\\n        bytes32 _recipientAddress,\\n        bytes calldata _messageBody\\n    ) external returns (bytes32);\\n\\n    function process(bytes calldata _metadata, bytes calldata _message)\\n        external;\\n\\n    function count() external view returns (uint32);\\n\\n    function root() external view returns (bytes32);\\n\\n    function latestCheckpoint() external view returns (bytes32, uint32);\\n\\n    function recipientIsm(address _recipient)\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0x5fa1da478e6c0561ab998ef0c21f3c4fc93b09b808c9e0f6cc1f1dc2012b380b\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Multinate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"./interfaces/IAttestationStation.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { HyperlaneConnectionClient } from \\\"@hyperlane-xyz/core/contracts/HyperlaneConnectionClient.sol\\\";\\r\\n\\r\\ncontract Multinate is HyperlaneConnectionClient {\\r\\n    IAttestationStation public attestationStation;\\r\\n    IERC20 public usdc;\\r\\n    uint256 public minimumAttestationScore;\\r\\n\\r\\n    bytes32 public constant REGISTRATION_KEY = keccak256(\\\"registration\\\");\\r\\n    bytes32 public constant TAX_EXEMPT_STATUS_KEY = keccak256(\\\"tax_exempt_status\\\");\\r\\n    bytes32 public constant FINANCIAL_STATEMENTS_KEY = keccak256(\\\"financial_statements\\\");\\r\\n    bytes32 public constant MISSION_STATEMENT_KEY = keccak256(\\\"mission_statement\\\");\\r\\n\\r\\n    mapping(address => uint256) public charityScores;\\r\\n    struct Campaign {\\r\\n        address payable charity;\\r\\n        string title;\\r\\n        string description;\\r\\n        uint256 targetAmount;\\r\\n        uint256 currentAmount;\\r\\n        uint256 deadline;\\r\\n        bool active;\\r\\n    }\\r\\n\\r\\n    uint256 public nextCampaignId = 1;\\r\\n\\r\\n    mapping(uint256 => Campaign) public campaigns;\\r\\n\\r\\n    event CampaignCreated(\\r\\n        uint256 indexed campaignId,\\r\\n        address indexed charity,\\r\\n        string title,\\r\\n        string description,\\r\\n        uint256 targetAmount,\\r\\n        uint256 deadline\\r\\n    );\\r\\n    event CharityEligibilityUpdated(address indexed charity, bool eligible);\\r\\n    event CampaignFunded(uint256 indexed campaignId, uint256 amount);\\r\\n    event Donated(uint32 origin, address indexed donor, uint256 indexed campaignId, uint256 amount);\\r\\n\\r\\n    constructor(address _attestationStation, uint256 _minimumAttestationScore, address _gnosisSafe, address _usdc) {\\r\\n        attestationStation = IAttestationStation(_attestationStation);\\r\\n        minimumAttestationScore = _minimumAttestationScore;\\r\\n        usdc = IERC20(_usdc);\\r\\n        // transferOwnership(_gnosisSafe);\\r\\n    }\\r\\n\\r\\n    function setMinimumAttestationScore(uint256 _minimumAttestationScore) external {\\r\\n        minimumAttestationScore = _minimumAttestationScore;\\r\\n    }\\r\\n\\r\\n    function updateCharityScore(address _charity) external {\\r\\n        uint256 score = 0;\\r\\n\\r\\n        // Add a scoring system based on the attestation data\\r\\n        bytes memory registrationData = attestationStation.attestations(msg.sender, _charity, REGISTRATION_KEY);\\r\\n        score += calculateRegistrationScore(registrationData);\\r\\n        bytes memory taxExemptStatusData = attestationStation.attestations(msg.sender, _charity, TAX_EXEMPT_STATUS_KEY);\\r\\n        score += calculateTaxExemptStatusScore(taxExemptStatusData);\\r\\n        bytes memory financialStatementsData = attestationStation.attestations(\\r\\n            msg.sender,\\r\\n            _charity,\\r\\n            FINANCIAL_STATEMENTS_KEY\\r\\n        );\\r\\n        score += calculateFinancialStatementsScore(financialStatementsData);\\r\\n        bytes memory missionStatementData = attestationStation.attestations(\\r\\n            msg.sender,\\r\\n            _charity,\\r\\n            MISSION_STATEMENT_KEY\\r\\n        );\\r\\n        score += calculateMissionStatementScore(missionStatementData);\\r\\n        charityScores[_charity] = score;\\r\\n        bool isEligible = score >= minimumAttestationScore;\\r\\n        emit CharityEligibilityUpdated(_charity, isEligible);\\r\\n    }\\r\\n\\r\\n    function isCharityEligible(address _charity) public view returns (bool) {\\r\\n        return charityScores[_charity] >= minimumAttestationScore;\\r\\n    }\\r\\n\\r\\n    function calculateRegistrationScore(bytes memory _registrationData) internal pure returns (uint256) {\\r\\n        // Check if registration data is available\\r\\n        if (_registrationData.length > 0) {\\r\\n            // In this example, we assign 25 points for having registration data\\r\\n            return 25;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function calculateTaxExemptStatusScore(bytes memory _taxExemptStatusData) internal pure returns (uint256) {\\r\\n        // Check if tax-exempt status data is available\\r\\n        if (_taxExemptStatusData.length > 0) {\\r\\n            // In this example, we assign 25 points for having tax-exempt status data\\r\\n            return 25;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function calculateFinancialStatementsScore(bytes memory _financialStatementsData) internal pure returns (uint256) {\\r\\n        // Check if financial statements data is available\\r\\n        if (_financialStatementsData.length > 0) {\\r\\n            // In this example, we assign a score between 0 and 25 based on the financial transparency level\\r\\n            // (e.g., percentage of funds spent on the mission, administrative costs, etc.)\\r\\n            uint256 transparencyLevel = uint8(_financialStatementsData[0]);\\r\\n            return (transparencyLevel * 25) / 100;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function calculateMissionStatementScore(bytes memory _missionStatementData) internal pure returns (uint256) {\\r\\n        // Check if mission statement data is available\\r\\n        if (_missionStatementData.length > 0) {\\r\\n            // In this example, we assign a score between 0 and 25 based on the mission's alignment with global goals (e.g., UN SDGs)\\r\\n            uint256 alignmentScore = uint8(_missionStatementData[0]);\\r\\n            return (alignmentScore * 25) / 100;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function createCampaign(\\r\\n        address _charity,\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        uint256 _targetAmount,\\r\\n        uint256 _deadline\\r\\n    ) external {\\r\\n        require(isCharityEligible(_charity), \\\"The charity organization is not eligible\\\");\\r\\n        require(_deadline > block.timestamp, \\\"Deadline must be in the future\\\");\\r\\n        require(_targetAmount > 0, \\\"Target amount must be greater than zero\\\");\\r\\n\\r\\n        uint256 campaignId = nextCampaignId;\\r\\n        nextCampaignId++;\\r\\n\\r\\n        campaigns[campaignId] = Campaign({\\r\\n            charity: payable(_charity),\\r\\n            title: _title,\\r\\n            description: _description,\\r\\n            targetAmount: _targetAmount,\\r\\n            currentAmount: 0,\\r\\n            deadline: _deadline,\\r\\n            active: true\\r\\n        });\\r\\n\\r\\n        emit CampaignCreated(campaignId, _charity, _title, _description, _targetAmount, _deadline);\\r\\n    }\\r\\n\\r\\n    // Withdraw funds from the campaign\\r\\n    function withdraw(uint256 _campaignId) external {\\r\\n        Campaign storage campaign = campaigns[_campaignId];\\r\\n        require(campaign.active, \\\"Campaign is not active\\\");\\r\\n        require(campaign.charity == msg.sender, \\\"Only the charity can withdraw funds\\\");\\r\\n        require(campaign.currentAmount >= campaign.targetAmount, \\\"Target amount not reached\\\");\\r\\n        require(campaign.deadline < block.timestamp, \\\"Deadline has not passed yet\\\");\\r\\n\\r\\n        campaign.active = false;\\r\\n        usdc.transfer(campaign.charity, campaign.currentAmount);\\r\\n        // Emit event\\r\\n        emit CampaignFunded(_campaignId, campaign.currentAmount);\\r\\n    }\\r\\n\\r\\n    // Handle donations\\r\\n    function handle(uint32 _origin, bytes32 _sender, bytes memory _message) external onlyMailbox {\\r\\n        // Decode the message\\r\\n        (address donor, uint256 campaignId, uint256 amount) = abi.decode(_message, (address, uint256, uint256));\\r\\n        Campaign storage campaign = campaigns[campaignId];\\r\\n        require(campaign.active, \\\"Campaign is not active\\\");\\r\\n        require(campaign.currentAmount + amount <= campaign.targetAmount, \\\"Target amount exceeded\\\");\\r\\n        require(campaign.deadline > block.timestamp, \\\"Deadline has passed\\\");\\r\\n        campaign.currentAmount += amount;\\r\\n        // Emit event\\r\\n        emit Donated(_origin, donor, campaignId, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x036e41a51aa66884a121aa81a6b99c9a35403a93f3978de0a9fa67f4d8748664\",\"license\":\"MIT\"},\"contracts/interfaces/IAttestationStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.15;\\r\\n\\r\\ninterface IAttestationStation {\\r\\n    function attestations(address creator, address about, bytes32 key) external view returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x7ab9ca4015c9b5ce5ecb9ce37e5b2cfbdf5eb76807d6ce979804bd9290737987\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001609c553480156200001657600080fd5b506040516200196438038062001964833981016040819052620000399162000091565b609880546001600160a01b03199081166001600160a01b0396871617909155609a9390935560998054909316931692909217905550620000e5565b80516001600160a01b03811681146200008c57600080fd5b919050565b60008060008060808587031215620000a857600080fd5b620000b38562000074565b935060208501519250620000ca6040860162000074565b9150620000da6060860162000074565b905092959194509250565b61186f80620000f56000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063c550042111610097578063de523cf311610071578063de523cf3146103b4578063f1bd6f0a146103c7578063f2fde38b146103da578063f3c61d6b146103ed57600080fd5b8063c55004211461033a578063d2009a271461037a578063d5438eae146103a157600080fd5b8063715018a6146102a357806372c0b64e146102ab5780637903a756146102d25780638da5cb5b146102db578063ab05b757146102ec578063b191f5321461031357600080fd5b806339bb4ad91161013057806339bb4ad9146102235780633e413bee1461024e5780634d17c7401461026157806356d5d475146102745780635de556371461028757806365a0aee21461029057600080fd5b8063075843c3146101785780630e72cc061461018d578063141961bc146101a057806327448176146101cf5780632dec1b4b146101fd5780632e1a7d4d14610210575b600080fd5b61018b610186366004611313565b610400565b005b61018b61019b36600461139b565b610662565b6101b36101ae3660046113b8565b610676565b6040516101c6979695949392919061142d565b60405180910390f35b6101ef6101dd36600461139b565b609b6020526000908152604090205481565b6040519081526020016101c6565b61018b61020b36600461139b565b6107cf565b61018b61021e3660046113b8565b610b00565b606654610236906001600160a01b031681565b6040516001600160a01b0390911681526020016101c6565b609954610236906001600160a01b031681565b61018b61026f3660046113b8565b609a55565b61018b61028236600461148c565b610d38565b6101ef609a5481565b609854610236906001600160a01b031681565b61018b610f0d565b6101ef7f3e5f59afb28eefd9525b5a2a3e685a733e99fa16aeacdb37152ea65d9b1b423d81565b6101ef609c5481565b6033546001600160a01b0316610236565b6101ef7f60ecd1bdb09484e1247f8c79f400cc78f8ff2b8bc010a2332aba54e28a3339c681565b6101ef7f13b35f1f951b0047acda6ce2a2e67dfca07ec779483f93c4d74d92d60109f3a681565b61036a61034836600461139b565b609a546001600160a01b039091166000908152609b6020526040902054101590565b60405190151581526020016101c6565b6101ef7fb54de7d710bb293db28cb644cd1b5e8ed893bb2d85468f8b0e5018b1c1864c8981565b606554610236906001600160a01b031681565b606754610236906001600160a01b031681565b61018b6103d536600461139b565b610f21565b61018b6103e836600461139b565b610f32565b61018b6103fb36600461139b565b610fa8565b609a546001600160a01b0386166000908152609b602052604090205410156104805760405162461bcd60e51b815260206004820152602860248201527f5468652063686172697479206f7267616e697a6174696f6e206973206e6f7420604482015267656c696769626c6560c01b60648201526084015b60405180910390fd5b4281116104cf5760405162461bcd60e51b815260206004820152601e60248201527f446561646c696e65206d75737420626520696e207468652066757475726500006044820152606401610477565b6000821161052f5760405162461bcd60e51b815260206004820152602760248201527f54617267657420616d6f756e74206d7573742062652067726561746572207468604482015266616e207a65726f60c81b6064820152608401610477565b609c8054908190600061054183611518565b90915550506040805160e0810182526001600160a01b03888116825260208083018981528385018990526060840188905260006080850181905260a08501889052600160c08601819052878252609d90935294909420835181546001600160a01b0319169316929092178255925191929091908201906105c190826115ba565b50604082015160028201906105d690826115ba565b50606082015160038201556080820151600482015560a0820151600582015560c0909101516006909101805460ff19169115159190911790556040516001600160a01b0387169082907f2ed5f13fbff3630ac8ec2d0779b5c1af5323ce6fa6e8810ce40317252f8733f29061065290899089908990899061167a565b60405180910390a3505050505050565b61066a610fb9565b61067381611013565b50565b609d60205260009081526040902080546001820180546001600160a01b0390921692916106a290611531565b80601f01602080910402602001604051908101604052809291908181526020018280546106ce90611531565b801561071b5780601f106106f05761010080835404028352916020019161071b565b820191906000526020600020905b8154815290600101906020018083116106fe57829003601f168201915b50505050509080600201805461073090611531565b80601f016020809104026020016040519081016040528092919081815260200182805461075c90611531565b80156107a95780601f1061077e576101008083540402835291602001916107a9565b820191906000526020600020905b81548152906001019060200180831161078c57829003601f168201915b505050506003830154600484015460058501546006909501549394919390925060ff1687565b6098546040516329b42cb560e01b815260009182916001600160a01b03909116906329b42cb59061082890339087907f60ecd1bdb09484e1247f8c79f400cc78f8ff2b8bc010a2332aba54e28a3339c6906004016116b3565b600060405180830381865afa158015610845573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261086d91908101906116d7565b905061087881611098565b610882908361174e565b6098546040516329b42cb560e01b81529193506000916001600160a01b03909116906329b42cb5906108dc90339088907f13b35f1f951b0047acda6ce2a2e67dfca07ec779483f93c4d74d92d60109f3a6906004016116b3565b600060405180830381865afa1580156108f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092191908101906116d7565b905061092c81611098565b610936908461174e565b6098546040516329b42cb560e01b81529194506000916001600160a01b03909116906329b42cb59061099090339089907f3e5f59afb28eefd9525b5a2a3e685a733e99fa16aeacdb37152ea65d9b1b423d906004016116b3565b600060405180830381865afa1580156109ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d591908101906116d7565b90506109e0816110b2565b6109ea908561174e565b6098546040516329b42cb560e01b81529195506000916001600160a01b03909116906329b42cb590610a449033908a907fb54de7d710bb293db28cb644cd1b5e8ed893bb2d85468f8b0e5018b1c1864c89906004016116b3565b600060405180830381865afa158015610a61573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a8991908101906116d7565b9050610a94816110b2565b610a9e908661174e565b6001600160a01b0387166000818152609b6020908152604091829020849055609a549151918410158083529398507f722947cf2ea50e4d2b4771633d4cb3ed1cd2a072d5d388a56f16cc28d49e3058910160405180910390a250505050505050565b6000818152609d60205260409020600681015460ff16610b5b5760405162461bcd60e51b815260206004820152601660248201527543616d706169676e206973206e6f742061637469766560501b6044820152606401610477565b80546001600160a01b03163314610bc05760405162461bcd60e51b815260206004820152602360248201527f4f6e6c792074686520636861726974792063616e2077697468647261772066756044820152626e647360e81b6064820152608401610477565b806003015481600401541015610c185760405162461bcd60e51b815260206004820152601960248201527f54617267657420616d6f756e74206e6f742072656163686564000000000000006044820152606401610477565b42816005015410610c6b5760405162461bcd60e51b815260206004820152601b60248201527f446561646c696e6520686173206e6f74207061737365642079657400000000006044820152606401610477565b60068101805460ff19169055609954815460048084015460405163a9059cbb60e01b81526001600160a01b0393841692810192909252602482015291169063a9059cbb906044016020604051808303816000875af1158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf59190611766565b50817f318daf69d77e946364e804495b2184222324b99fddeb42ab5fd25a919f596e8c8260040154604051610d2c91815260200190565b60405180910390a25050565b6065546001600160a01b03163314610d7d5760405162461bcd60e51b8152602060048201526008602482015267042dac2d2d8c4def60c31b6044820152606401610477565b600080600083806020019051810190610d969190611788565b6000828152609d60205260409020600681015493965091945092509060ff16610dfa5760405162461bcd60e51b815260206004820152601660248201527543616d706169676e206973206e6f742061637469766560501b6044820152606401610477565b8060030154828260040154610e0f919061174e565b1115610e565760405162461bcd60e51b815260206004820152601660248201527515185c99d95d08185b5bdd5b9d08195e18d95959195960521b6044820152606401610477565b42816005015411610e9f5760405162461bcd60e51b8152602060048201526013602482015272111958591b1a5b99481a185cc81c185cdcd959606a1b6044820152606401610477565b81816004016000828254610eb3919061174e565b90915550506040805163ffffffff891681526020810184905284916001600160a01b038716917f249073b88ce702b9abd1ff334f555a3261c9b36e51dc61b0924fabdb511a4a42910160405180910390a350505050505050565b610f15610fb9565b610f1f60006110f9565b565b610f29610fb9565b6106738161114b565b610f3a610fb9565b6001600160a01b038116610f9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610477565b610673816110f9565b610fb0610fb9565b610673816111be565b6033546001600160a01b03163314610f1f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610477565b6001600160a01b038116158061103257506001600160a01b0381163b15155b61104e5760405162461bcd60e51b8152600401610477906117bf565b606780546001600160a01b0319166001600160a01b0383169081179091556040517ffec811ed4e60aebdaf7a79cad8a97196bf56e35362f039705598226d30c9d24890600090a250565b8051600090156110aa57506019919050565b506000919050565b8051600090156110aa576000826000815181106110d1576110d16117e2565b016020015160f81c905060646110e88260196117f8565b6110f29190611817565b9392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160a01b0381163b6111735760405162461bcd60e51b8152600401610477906117bf565b606680546001600160a01b0319166001600160a01b0384169081179091556040517fb87f5a0bface22cde699143559fb99f990ae54eea236995fc54178af91af859f90600090a25050565b806001600160a01b0381163b6111e65760405162461bcd60e51b8152600401610477906117bf565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f7a61e573722ff8b205c8962b59d37e7d30573f368965597a844a94872204ebd790600090a25050565b6001600160a01b038116811461067357600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561128557611285611246565b604052919050565b600067ffffffffffffffff8211156112a7576112a7611246565b50601f01601f191660200190565b60006112c86112c38461128d565b61125c565b90508281528383830111156112dc57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261130457600080fd5b6110f2838335602085016112b5565b600080600080600060a0868803121561132b57600080fd5b853561133681611231565b9450602086013567ffffffffffffffff8082111561135357600080fd5b61135f89838a016112f3565b9550604088013591508082111561137557600080fd5b50611382888289016112f3565b9598949750949560608101359550608001359392505050565b6000602082840312156113ad57600080fd5b81356110f281611231565b6000602082840312156113ca57600080fd5b5035919050565b60005b838110156113ec5781810151838201526020016113d4565b838111156113fb576000848401525b50505050565b600081518084526114198160208601602086016113d1565b601f01601f19169290920160200192915050565b6001600160a01b038816815260e06020820181905260009061145190830189611401565b82810360408401526114638189611401565b9150508560608301528460808301528360a083015282151560c083015298975050505050505050565b6000806000606084860312156114a157600080fd5b833563ffffffff811681146114b557600080fd5b925060208401359150604084013567ffffffffffffffff8111156114d857600080fd5b8401601f810186136114e957600080fd5b6114f8868235602084016112b5565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b60006001820161152a5761152a611502565b5060010190565b600181811c9082168061154557607f821691505b60208210810361156557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156115b557600081815260208120601f850160051c810160208610156115925750805b601f850160051c820191505b818110156115b15782815560010161159e565b5050505b505050565b815167ffffffffffffffff8111156115d4576115d4611246565b6115e8816115e28454611531565b8461156b565b602080601f83116001811461161d57600084156116055750858301515b600019600386901b1c1916600185901b1785556115b1565b600085815260208120601f198616915b8281101561164c5788860151825594840194600190910190840161162d565b508582101561166a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60808152600061168d6080830187611401565b828103602084015261169f8187611401565b604084019590955250506060015292915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156116e957600080fd5b815167ffffffffffffffff81111561170057600080fd5b8201601f8101841361171157600080fd5b805161171f6112c38261128d565b81815285602083850101111561173457600080fd5b6117458260208301602086016113d1565b95945050505050565b6000821982111561176157611761611502565b500190565b60006020828403121561177857600080fd5b815180151581146110f257600080fd5b60008060006060848603121561179d57600080fd5b83516117a881611231565b602085015160409095015190969495509392505050565b6020808252600990820152680858dbdb9d1c9858dd60ba1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561181257611812611502565b500290565b60008261183457634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d08e2007b9bda1287bbb48d7af9ee9b2f26dc0d1fedc112c908af9c8ecf1d0fd64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063c550042111610097578063de523cf311610071578063de523cf3146103b4578063f1bd6f0a146103c7578063f2fde38b146103da578063f3c61d6b146103ed57600080fd5b8063c55004211461033a578063d2009a271461037a578063d5438eae146103a157600080fd5b8063715018a6146102a357806372c0b64e146102ab5780637903a756146102d25780638da5cb5b146102db578063ab05b757146102ec578063b191f5321461031357600080fd5b806339bb4ad91161013057806339bb4ad9146102235780633e413bee1461024e5780634d17c7401461026157806356d5d475146102745780635de556371461028757806365a0aee21461029057600080fd5b8063075843c3146101785780630e72cc061461018d578063141961bc146101a057806327448176146101cf5780632dec1b4b146101fd5780632e1a7d4d14610210575b600080fd5b61018b610186366004611313565b610400565b005b61018b61019b36600461139b565b610662565b6101b36101ae3660046113b8565b610676565b6040516101c6979695949392919061142d565b60405180910390f35b6101ef6101dd36600461139b565b609b6020526000908152604090205481565b6040519081526020016101c6565b61018b61020b36600461139b565b6107cf565b61018b61021e3660046113b8565b610b00565b606654610236906001600160a01b031681565b6040516001600160a01b0390911681526020016101c6565b609954610236906001600160a01b031681565b61018b61026f3660046113b8565b609a55565b61018b61028236600461148c565b610d38565b6101ef609a5481565b609854610236906001600160a01b031681565b61018b610f0d565b6101ef7f3e5f59afb28eefd9525b5a2a3e685a733e99fa16aeacdb37152ea65d9b1b423d81565b6101ef609c5481565b6033546001600160a01b0316610236565b6101ef7f60ecd1bdb09484e1247f8c79f400cc78f8ff2b8bc010a2332aba54e28a3339c681565b6101ef7f13b35f1f951b0047acda6ce2a2e67dfca07ec779483f93c4d74d92d60109f3a681565b61036a61034836600461139b565b609a546001600160a01b039091166000908152609b6020526040902054101590565b60405190151581526020016101c6565b6101ef7fb54de7d710bb293db28cb644cd1b5e8ed893bb2d85468f8b0e5018b1c1864c8981565b606554610236906001600160a01b031681565b606754610236906001600160a01b031681565b61018b6103d536600461139b565b610f21565b61018b6103e836600461139b565b610f32565b61018b6103fb36600461139b565b610fa8565b609a546001600160a01b0386166000908152609b602052604090205410156104805760405162461bcd60e51b815260206004820152602860248201527f5468652063686172697479206f7267616e697a6174696f6e206973206e6f7420604482015267656c696769626c6560c01b60648201526084015b60405180910390fd5b4281116104cf5760405162461bcd60e51b815260206004820152601e60248201527f446561646c696e65206d75737420626520696e207468652066757475726500006044820152606401610477565b6000821161052f5760405162461bcd60e51b815260206004820152602760248201527f54617267657420616d6f756e74206d7573742062652067726561746572207468604482015266616e207a65726f60c81b6064820152608401610477565b609c8054908190600061054183611518565b90915550506040805160e0810182526001600160a01b03888116825260208083018981528385018990526060840188905260006080850181905260a08501889052600160c08601819052878252609d90935294909420835181546001600160a01b0319169316929092178255925191929091908201906105c190826115ba565b50604082015160028201906105d690826115ba565b50606082015160038201556080820151600482015560a0820151600582015560c0909101516006909101805460ff19169115159190911790556040516001600160a01b0387169082907f2ed5f13fbff3630ac8ec2d0779b5c1af5323ce6fa6e8810ce40317252f8733f29061065290899089908990899061167a565b60405180910390a3505050505050565b61066a610fb9565b61067381611013565b50565b609d60205260009081526040902080546001820180546001600160a01b0390921692916106a290611531565b80601f01602080910402602001604051908101604052809291908181526020018280546106ce90611531565b801561071b5780601f106106f05761010080835404028352916020019161071b565b820191906000526020600020905b8154815290600101906020018083116106fe57829003601f168201915b50505050509080600201805461073090611531565b80601f016020809104026020016040519081016040528092919081815260200182805461075c90611531565b80156107a95780601f1061077e576101008083540402835291602001916107a9565b820191906000526020600020905b81548152906001019060200180831161078c57829003601f168201915b505050506003830154600484015460058501546006909501549394919390925060ff1687565b6098546040516329b42cb560e01b815260009182916001600160a01b03909116906329b42cb59061082890339087907f60ecd1bdb09484e1247f8c79f400cc78f8ff2b8bc010a2332aba54e28a3339c6906004016116b3565b600060405180830381865afa158015610845573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261086d91908101906116d7565b905061087881611098565b610882908361174e565b6098546040516329b42cb560e01b81529193506000916001600160a01b03909116906329b42cb5906108dc90339088907f13b35f1f951b0047acda6ce2a2e67dfca07ec779483f93c4d74d92d60109f3a6906004016116b3565b600060405180830381865afa1580156108f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092191908101906116d7565b905061092c81611098565b610936908461174e565b6098546040516329b42cb560e01b81529194506000916001600160a01b03909116906329b42cb59061099090339089907f3e5f59afb28eefd9525b5a2a3e685a733e99fa16aeacdb37152ea65d9b1b423d906004016116b3565b600060405180830381865afa1580156109ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d591908101906116d7565b90506109e0816110b2565b6109ea908561174e565b6098546040516329b42cb560e01b81529195506000916001600160a01b03909116906329b42cb590610a449033908a907fb54de7d710bb293db28cb644cd1b5e8ed893bb2d85468f8b0e5018b1c1864c89906004016116b3565b600060405180830381865afa158015610a61573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a8991908101906116d7565b9050610a94816110b2565b610a9e908661174e565b6001600160a01b0387166000818152609b6020908152604091829020849055609a549151918410158083529398507f722947cf2ea50e4d2b4771633d4cb3ed1cd2a072d5d388a56f16cc28d49e3058910160405180910390a250505050505050565b6000818152609d60205260409020600681015460ff16610b5b5760405162461bcd60e51b815260206004820152601660248201527543616d706169676e206973206e6f742061637469766560501b6044820152606401610477565b80546001600160a01b03163314610bc05760405162461bcd60e51b815260206004820152602360248201527f4f6e6c792074686520636861726974792063616e2077697468647261772066756044820152626e647360e81b6064820152608401610477565b806003015481600401541015610c185760405162461bcd60e51b815260206004820152601960248201527f54617267657420616d6f756e74206e6f742072656163686564000000000000006044820152606401610477565b42816005015410610c6b5760405162461bcd60e51b815260206004820152601b60248201527f446561646c696e6520686173206e6f74207061737365642079657400000000006044820152606401610477565b60068101805460ff19169055609954815460048084015460405163a9059cbb60e01b81526001600160a01b0393841692810192909252602482015291169063a9059cbb906044016020604051808303816000875af1158015610cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf59190611766565b50817f318daf69d77e946364e804495b2184222324b99fddeb42ab5fd25a919f596e8c8260040154604051610d2c91815260200190565b60405180910390a25050565b6065546001600160a01b03163314610d7d5760405162461bcd60e51b8152602060048201526008602482015267042dac2d2d8c4def60c31b6044820152606401610477565b600080600083806020019051810190610d969190611788565b6000828152609d60205260409020600681015493965091945092509060ff16610dfa5760405162461bcd60e51b815260206004820152601660248201527543616d706169676e206973206e6f742061637469766560501b6044820152606401610477565b8060030154828260040154610e0f919061174e565b1115610e565760405162461bcd60e51b815260206004820152601660248201527515185c99d95d08185b5bdd5b9d08195e18d95959195960521b6044820152606401610477565b42816005015411610e9f5760405162461bcd60e51b8152602060048201526013602482015272111958591b1a5b99481a185cc81c185cdcd959606a1b6044820152606401610477565b81816004016000828254610eb3919061174e565b90915550506040805163ffffffff891681526020810184905284916001600160a01b038716917f249073b88ce702b9abd1ff334f555a3261c9b36e51dc61b0924fabdb511a4a42910160405180910390a350505050505050565b610f15610fb9565b610f1f60006110f9565b565b610f29610fb9565b6106738161114b565b610f3a610fb9565b6001600160a01b038116610f9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610477565b610673816110f9565b610fb0610fb9565b610673816111be565b6033546001600160a01b03163314610f1f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610477565b6001600160a01b038116158061103257506001600160a01b0381163b15155b61104e5760405162461bcd60e51b8152600401610477906117bf565b606780546001600160a01b0319166001600160a01b0383169081179091556040517ffec811ed4e60aebdaf7a79cad8a97196bf56e35362f039705598226d30c9d24890600090a250565b8051600090156110aa57506019919050565b506000919050565b8051600090156110aa576000826000815181106110d1576110d16117e2565b016020015160f81c905060646110e88260196117f8565b6110f29190611817565b9392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160a01b0381163b6111735760405162461bcd60e51b8152600401610477906117bf565b606680546001600160a01b0319166001600160a01b0384169081179091556040517fb87f5a0bface22cde699143559fb99f990ae54eea236995fc54178af91af859f90600090a25050565b806001600160a01b0381163b6111e65760405162461bcd60e51b8152600401610477906117bf565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f7a61e573722ff8b205c8962b59d37e7d30573f368965597a844a94872204ebd790600090a25050565b6001600160a01b038116811461067357600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561128557611285611246565b604052919050565b600067ffffffffffffffff8211156112a7576112a7611246565b50601f01601f191660200190565b60006112c86112c38461128d565b61125c565b90508281528383830111156112dc57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261130457600080fd5b6110f2838335602085016112b5565b600080600080600060a0868803121561132b57600080fd5b853561133681611231565b9450602086013567ffffffffffffffff8082111561135357600080fd5b61135f89838a016112f3565b9550604088013591508082111561137557600080fd5b50611382888289016112f3565b9598949750949560608101359550608001359392505050565b6000602082840312156113ad57600080fd5b81356110f281611231565b6000602082840312156113ca57600080fd5b5035919050565b60005b838110156113ec5781810151838201526020016113d4565b838111156113fb576000848401525b50505050565b600081518084526114198160208601602086016113d1565b601f01601f19169290920160200192915050565b6001600160a01b038816815260e06020820181905260009061145190830189611401565b82810360408401526114638189611401565b9150508560608301528460808301528360a083015282151560c083015298975050505050505050565b6000806000606084860312156114a157600080fd5b833563ffffffff811681146114b557600080fd5b925060208401359150604084013567ffffffffffffffff8111156114d857600080fd5b8401601f810186136114e957600080fd5b6114f8868235602084016112b5565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b60006001820161152a5761152a611502565b5060010190565b600181811c9082168061154557607f821691505b60208210810361156557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156115b557600081815260208120601f850160051c810160208610156115925750805b601f850160051c820191505b818110156115b15782815560010161159e565b5050505b505050565b815167ffffffffffffffff8111156115d4576115d4611246565b6115e8816115e28454611531565b8461156b565b602080601f83116001811461161d57600084156116055750858301515b600019600386901b1c1916600185901b1785556115b1565b600085815260208120601f198616915b8281101561164c5788860151825594840194600190910190840161162d565b508582101561166a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60808152600061168d6080830187611401565b828103602084015261169f8187611401565b604084019590955250506060015292915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156116e957600080fd5b815167ffffffffffffffff81111561170057600080fd5b8201601f8101841361171157600080fd5b805161171f6112c38261128d565b81815285602083850101111561173457600080fd5b6117458260208301602086016113d1565b95945050505050565b6000821982111561176157611761611502565b500190565b60006020828403121561177857600080fd5b815180151581146110f257600080fd5b60008060006060848603121561179d57600080fd5b83516117a881611231565b602085015160409095015190969495509392505050565b6020808252600990820152680858dbdb9d1c9858dd60ba1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561181257611812611502565b500290565b60008261183457634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d08e2007b9bda1287bbb48d7af9ee9b2f26dc0d1fedc112c908af9c8ecf1d0fd64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setInterchainGasPaymaster(address)": {
        "params": {
          "_interchainGasPaymaster": "The address of the InterchainGasPaymaster contract."
        }
      },
      "setMailbox(address)": {
        "params": {
          "_mailbox": "The address of the Mailbox contract."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "InterchainGasPaymasterSet(address)": {
        "notice": "Emitted when a new Interchain Gas Paymaster is set."
      },
      "MailboxSet(address)": {
        "notice": "Emitted when a new mailbox is set."
      }
    },
    "kind": "user",
    "methods": {
      "setInterchainGasPaymaster(address)": {
        "notice": "Sets the address of the application's InterchainGasPaymaster."
      },
      "setMailbox(address)": {
        "notice": "Sets the address of the application's Mailbox."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 519,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 522,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1006,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 391,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 511,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "mailbox",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IMailbox)380"
      },
      {
        "astId": 22,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "interchainGasPaymaster",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IInterchainGasPaymaster)301"
      },
      {
        "astId": 25,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "interchainSecurityModule",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IInterchainSecurityModule)320"
      },
      {
        "astId": 29,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "__GAP",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 1426,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "attestationStation",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IAttestationStation)1984"
      },
      {
        "astId": 1429,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "usdc",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IERC20)1085"
      },
      {
        "astId": 1431,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "minimumAttestationScore",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 1455,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "charityScores",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1473,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "nextCampaignId",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 1478,
        "contract": "contracts/Multinate.sol:Multinate",
        "label": "campaigns",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_uint256,t_struct(Campaign)1470_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAttestationStation)1984": {
        "encoding": "inplace",
        "label": "contract IAttestationStation",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1085": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IInterchainGasPaymaster)301": {
        "encoding": "inplace",
        "label": "contract IInterchainGasPaymaster",
        "numberOfBytes": "20"
      },
      "t_contract(IInterchainSecurityModule)320": {
        "encoding": "inplace",
        "label": "contract IInterchainSecurityModule",
        "numberOfBytes": "20"
      },
      "t_contract(IMailbox)380": {
        "encoding": "inplace",
        "label": "contract IMailbox",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Campaign)1470_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Multinate.Campaign)",
        "numberOfBytes": "32",
        "value": "t_struct(Campaign)1470_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Campaign)1470_storage": {
        "encoding": "inplace",
        "label": "struct Multinate.Campaign",
        "members": [
          {
            "astId": 1457,
            "contract": "contracts/Multinate.sol:Multinate",
            "label": "charity",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 1459,
            "contract": "contracts/Multinate.sol:Multinate",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1461,
            "contract": "contracts/Multinate.sol:Multinate",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1463,
            "contract": "contracts/Multinate.sol:Multinate",
            "label": "targetAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1465,
            "contract": "contracts/Multinate.sol:Multinate",
            "label": "currentAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1467,
            "contract": "contracts/Multinate.sol:Multinate",
            "label": "deadline",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1469,
            "contract": "contracts/Multinate.sol:Multinate",
            "label": "active",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}