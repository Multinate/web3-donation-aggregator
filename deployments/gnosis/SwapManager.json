{
  "address": "0x03cC5dcefBc0921FF285cFBE84Ce15d1359111Bc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hypUSDCToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multinate",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DonationReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DonationReceivedETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addressToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "donateETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hypUSDCToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multinate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        }
      ],
      "name": "setChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hypUSDCToken",
          "type": "address"
        }
      ],
      "name": "setHypUSDCToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_multinate",
          "type": "address"
        }
      ],
      "name": "setMultinate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "name": "setUniswapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        }
      ],
      "name": "setUsdcToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract IPancakeRouter02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd2e7c16c2976edcb974f18caf6661aceec930f022ebcc5ffd84b7bfcc0702f0f",
  "receipt": {
    "to": null,
    "from": "0x6860542E55Fb9292e4c8b478FcEec724d3351C2e",
    "contractAddress": "0x03cC5dcefBc0921FF285cFBE84Ce15d1359111Bc",
    "transactionIndex": 1,
    "gasUsed": "1298615",
    "logsBloom": "0x80000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000004000000000000000000000000000000000000000000000000020000010",
    "blockHash": "0x769643217f98d6e6298bfffda8012a0acd4fc60f6e79b690647a84bc0d866bb6",
    "transactionHash": "0xd2e7c16c2976edcb974f18caf6661aceec930f022ebcc5ffd84b7bfcc0702f0f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27132513,
        "transactionHash": "0xd2e7c16c2976edcb974f18caf6661aceec930f022ebcc5ffd84b7bfcc0702f0f",
        "address": "0x03cC5dcefBc0921FF285cFBE84Ce15d1359111Bc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006860542e55fb9292e4c8b478fceec724d3351c2e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x769643217f98d6e6298bfffda8012a0acd4fc60f6e79b690647a84bc0d866bb6"
      }
    ],
    "blockNumber": 27132513,
    "cumulativeGasUsed": "1335800",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x07A583000b1C86b159e065D16c05fbD5A14f92A8",
    "0x77f359C9e1F5a1264B931fca77523d99a7807b50",
    "0x2d3d6f3d638f81fD6e919Dc34F04ccd6f59B718b",
    "0xddF51C4e20A05733a24837684b95626B7422d4Df",
    "100"
  ],
  "numDeployments": 1,
  "solcInputHash": "a4a3dcca41c15d2775035a477e59c957",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hypUSDCToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multinate\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonationReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addressToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"donateETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hypUSDCToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multinate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hypUSDCToken\",\"type\":\"address\"}],\"name\":\"setHypUSDCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multinate\",\"type\":\"address\"}],\"name\":\"setMultinate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"}],\"name\":\"setUsdcToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapManager.sol\":\"SwapManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@hyperlane-xyz/core/interfaces/IInterchainGasPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title IInterchainGasPaymaster\\n * @notice Manages payments on a source chain to cover gas costs of relaying\\n * messages to destination chains.\\n */\\ninterface IInterchainGasPaymaster {\\n    /**\\n     * @notice Emitted when a payment is made for a message's gas costs.\\n     * @param messageId The ID of the message to pay for.\\n     * @param gasAmount The amount of destination gas paid for.\\n     * @param payment The amount of native tokens paid.\\n     */\\n    event GasPayment(\\n        bytes32 indexed messageId,\\n        uint256 gasAmount,\\n        uint256 payment\\n    );\\n\\n    function payForGas(\\n        bytes32 _messageId,\\n        uint32 _destinationDomain,\\n        uint256 _gasAmount,\\n        address _refundAddress\\n    ) external payable;\\n\\n    function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xb9a7223948c3ada4d37b0dd08e1625fb53d102b037a6104f43497d43226889ee\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(bytes calldata _metadata, bytes calldata _message)\\n        external\\n        returns (bool);\\n}\\n\\ninterface ISpecifiesInterchainSecurityModule {\\n    function interchainSecurityModule()\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0xb963aa8eb79d245ff750ec013b467b8a7bced3de5eaad7ea5595967f2ea9a253\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\n\\ninterface IMailbox {\\n    function localDomain() external view returns (uint32);\\n\\n    function dispatch(\\n        uint32 _destinationDomain,\\n        bytes32 _recipientAddress,\\n        bytes calldata _messageBody\\n    ) external returns (bytes32);\\n\\n    function process(bytes calldata _metadata, bytes calldata _message)\\n        external;\\n\\n    function count() external view returns (uint32);\\n\\n    function root() external view returns (bytes32);\\n\\n    function latestCheckpoint() external view returns (bytes32, uint32);\\n\\n    function recipientIsm(address _recipient)\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0x5fa1da478e6c0561ab998ef0c21f3c4fc93b09b808c9e0f6cc1f1dc2012b380b\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.15;\\r\\nimport \\\"./interfaces/IPancakeRouter02.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IHypERC20.sol\\\";\\r\\nimport \\\"@hyperlane-xyz/core/interfaces/IInterchainGasPaymaster.sol\\\";\\r\\nimport \\\"@hyperlane-xyz/core/interfaces/IMailbox.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IDonate.sol\\\";\\r\\n\\r\\ncontract SwapManager is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public usdcToken;\\r\\n    address public hypUSDCToken;\\r\\n    address public multinate;\\r\\n    // IMailbox public mailbox;\\r\\n    uint32 public chainId;\\r\\n    IPancakeRouter02 public uniswapRouter;\\r\\n    // The Mailbox (same address on all EVM chains)\\r\\n    IMailbox mailbox = IMailbox(0x35231d4c2D8B8ADcB5617A638A0c4548684c7C70);\\r\\n    // The mainnet DefaultIsmInterchainGasPaymaster\\r\\n    // (same address on all mainnet EVM chains)\\r\\n    IInterchainGasPaymaster igp = IInterchainGasPaymaster(0x56f52c0A1ddcD557285f7CBc782D3d83096CE1Cc);\\r\\n    event DonationReceived(address indexed donor, address indexed token, uint256 amount);\\r\\n    event DonationReceivedETH(address indexed donor, uint256 amount);\\r\\n    event Swapped(address indexed token, uint256 amountIn, uint256 amountOut);\\r\\n\\r\\n    constructor(\\r\\n        address _usdcToken,\\r\\n        address _hypUSDCToken,\\r\\n        address _uniswapRouter,\\r\\n        address _multinate,\\r\\n        uint32 _chainId\\r\\n    ) {\\r\\n        usdcToken = _usdcToken;\\r\\n        hypUSDCToken = _hypUSDCToken;\\r\\n        multinate = _multinate;\\r\\n        chainId = _chainId;\\r\\n        uniswapRouter = IPancakeRouter02(_uniswapRouter);\\r\\n    }\\r\\n\\r\\n    function addressToBytes32(address addr) public pure returns (bytes32) {\\r\\n        return bytes32(uint256(uint160(addr)));\\r\\n    }\\r\\n\\r\\n    function donate(address _token, uint256 _amount, uint256 _campaignId) external payable {\\r\\n        IERC20 token = IERC20(_token);\\r\\n        require(token.transferFrom(msg.sender, address(this), _amount), \\\"Transfer failed\\\");\\r\\n        uint256 _amountsOut;\\r\\n        if (_token != usdcToken) {\\r\\n            _amountsOut = swap(_token, _amount);\\r\\n        }\\r\\n        if (chainId != 100) {\\r\\n            // Call Hyperlane to bridge USDC to Optimism and require success\\r\\n            IHypERC20(hypUSDCToken).transferRemote{ value: 0.01 ether }(chainId, addressToBytes32(multinate), _amount);\\r\\n            bytes32 messageId = mailbox.dispatch(\\r\\n                chainId,\\r\\n                addressToBytes32(multinate),\\r\\n                abi.encode(msg.sender, _campaignId, _amountsOut)\\r\\n            );\\r\\n            igp.payForGas{ value: msg.value }(\\r\\n                messageId, // The ID of the message that was just dispatched\\r\\n                chainId, // The destination domain of the message\\r\\n                50000, // 50k gas to use in the recipient's handle function\\r\\n                msg.sender // refunds go to msg.sender, who paid the msg.value\\r\\n            );\\r\\n        } else {\\r\\n            IDonate(multinate).donate(_campaignId, _amountsOut);\\r\\n        }\\r\\n\\r\\n        // Emit event\\r\\n        emit DonationReceived(msg.sender, _token, _amountsOut);\\r\\n    }\\r\\n\\r\\n    function donateETH(uint256 _campaignId) external payable {\\r\\n        require(msg.value > 0.01 ether, \\\"No ETH received\\\");\\r\\n        emit DonationReceived(msg.sender, address(0), msg.value);\\r\\n        uint256 _amountsOut = swapETH(msg.value - 0.01 ether);\\r\\n\\r\\n        if (chainId != 100) {\\r\\n            // Call Hyperlane to bridge USDC to Optimism\\r\\n            IHypERC20(hypUSDCToken).transferRemote{ value: 0.01 ether }(\\r\\n                chainId,\\r\\n                addressToBytes32(multinate),\\r\\n                msg.value - 0.01 ether\\r\\n            );\\r\\n            bytes32 messageId = mailbox.dispatch(\\r\\n                chainId,\\r\\n                addressToBytes32(multinate),\\r\\n                abi.encode(msg.sender, _campaignId, _amountsOut)\\r\\n            );\\r\\n            igp.payForGas{ value: msg.value }(\\r\\n                messageId, // The ID of the message that was just dispatched\\r\\n                chainId, // The destination domain of the message\\r\\n                50000, // 50k gas to use in the recipient's handle function\\r\\n                msg.sender // refunds go to msg.sender, who paid the msg.value\\r\\n            );\\r\\n        } else {\\r\\n            IDonate(multinate).donate(_campaignId, _amountsOut);\\r\\n        }\\r\\n        emit DonationReceivedETH(msg.sender, _amountsOut);\\r\\n    }\\r\\n\\r\\n    function swap(address _token, uint256 _amount) private returns (uint256) {\\r\\n        IERC20 token = IERC20(_token);\\r\\n        uint256 deadline = block.timestamp + 600; // 10 minutes\\r\\n        token.approve(address(uniswapRouter), _amount);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = _token;\\r\\n        path[1] = usdcToken;\\r\\n\\r\\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(_amount, 1, path, address(this), deadline);\\r\\n\\r\\n        emit Swapped(_token, amounts[0], amounts[1]);\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function swapETH(uint256 _ethAmount) private returns (uint256) {\\r\\n        uint256 deadline = block.timestamp + 600; // 10 minutes\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = uniswapRouter.WETH();\\r\\n        path[1] = usdcToken;\\r\\n\\r\\n        uint256[] memory amounts = uniswapRouter.swapExactETHForTokens{ value: _ethAmount }(\\r\\n            1,\\r\\n            path,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        emit Swapped(address(0), amounts[0], amounts[1]);\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    // Setters\\r\\n    function setMultinate(address _multinate) external {\\r\\n        multinate = _multinate;\\r\\n    }\\r\\n\\r\\n    function setChainId(uint32 _chainId) external {\\r\\n        chainId = _chainId;\\r\\n    }\\r\\n\\r\\n    function setUniswapRouter(address _uniswapRouter) external {\\r\\n        uniswapRouter = IPancakeRouter02(_uniswapRouter);\\r\\n    }\\r\\n\\r\\n    function setHypUSDCToken(address _hypUSDCToken) external {\\r\\n        hypUSDCToken = _hypUSDCToken;\\r\\n    }\\r\\n\\r\\n    function setUsdcToken(address _usdcToken) external {\\r\\n        usdcToken = _usdcToken;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb3b09f85d212aa68d35f7adf9a242acb8be482b71ad191876704cb6eb1dc799\",\"license\":\"MIT\"},\"contracts/interfaces/IDonate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.15;\\r\\n\\r\\ninterface IDonate {\\r\\n    function donate(uint256 _campaignId, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xee8d75cb6d35c05d0175bdbd44f34249c3c5028b52f1c4d7e263cc28794a5266\",\"license\":\"MIT\"},\"contracts/interfaces/IHypERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.15;\\r\\n\\r\\ninterface IHypERC20 {\\r\\n    /**\\r\\n     * @notice Transfers `_amountOrId` token to `_recipient` on `_destination` domain.\\r\\n     * @dev Delegates transfer logic to `_transferFromSender` implementation.\\r\\n     * @dev Emits `SentTransferRemote` event on the origin chain.\\r\\n     * @param _destination The identifier of the destination chain.\\r\\n     * @param _recipient The address of the recipient on the destination chain.\\r\\n     * @param _amountOrId The amount or identifier of tokens to be sent to the remote recipient.\\r\\n     * @return messageId The identifier of the dispatched message.\\r\\n     */\\r\\n    function transferRemote(\\r\\n        uint32 _destination,\\r\\n        bytes32 _recipient,\\r\\n        uint256 _amountOrId\\r\\n    ) external payable returns (bytes32 messageId);\\r\\n}\\r\\n\",\"keccak256\":\"0x32380c88b1133c4ff9aee1b7996c2a8d949ea3ee391cf9e7dcd6c3d1f9a2246c\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x3058a347c875e0c7c981dff9286cf2d3223e3501250a339ee4b0c392e8a5f3bb\"},\"contracts/interfaces/IPancakeRouter02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\r\\n\\r\\nimport \\\"./IPancakeRouter01.sol\\\";\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x94442271a16a918b283f1111f7000e6246e02be806d82d969b423779f486d56c\"}},\"version\":1}",
  "bytecode": "0x6080604052600580546001600160a01b03199081167335231d4c2d8b8adcb5617a638a0c4548684c7c7017909155600680549091167356f52c0a1ddcd557285f7cbc782d3d83096ce1cc1790553480156200005957600080fd5b5060405162001573380380620015738339810160408190526200007c916200015f565b6200008733620000f2565b600180546001600160a01b039687166001600160a01b03199182161790915560028054958716958216959095179094556003805463ffffffff909216600160a01b026001600160c01b03199092169286169290921717905560048054919093169116179055620001db565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200015a57600080fd5b919050565b600080600080600060a086880312156200017857600080fd5b620001838662000142565b9450620001936020870162000142565b9350620001a36040870162000142565b9250620001b36060870162000142565b9150608086015163ffffffff81168114620001cd57600080fd5b809150509295509295909350565b61138880620001eb6000396000f3fe6080604052600436106100f35760003560e01c80639a8a05921161008a578063d463227611610059578063d463227614610323578063e0964d1214610336578063efe75d8214610373578063f2fde38b1461039357600080fd5b80639a8a059214610259578063a179f12414610292578063ab83f98a146102d3578063bea9849e146102e657600080fd5b806382c947b7116100c657806382c947b7146101a9578063852759f2146101de5780638da5cb5b1461021b57806393f1a5f91461023957600080fd5b806311eac855146100f85780635d886f2214610135578063715018a614610174578063735de9f714610189575b600080fd5b34801561010457600080fd5b50600154610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014157600080fd5b50610172610150366004611014565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b005b34801561018057600080fd5b506101726103b3565b34801561019557600080fd5b50600454610118906001600160a01b031681565b3480156101b557600080fd5b506101d06101c4366004611014565b6001600160a01b031690565b60405190815260200161012c565b3480156101ea57600080fd5b506101726101f9366004611014565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b34801561022757600080fd5b506000546001600160a01b0316610118565b34801561024557600080fd5b50600254610118906001600160a01b031681565b34801561026557600080fd5b5060035461027d90600160a01b900463ffffffff1681565b60405163ffffffff909116815260200161012c565b34801561029e57600080fd5b506101726102ad366004611038565b6003805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b6101726102e136600461105e565b6103c7565b3480156102f257600080fd5b50610172610301366004611014565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610172610331366004611077565b610713565b34801561034257600080fd5b50610172610351366004611014565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b34801561037f57600080fd5b50600354610118906001600160a01b031681565b34801561039f57600080fd5b506101726103ae366004611014565b610a94565b6103bb610b0d565b6103c56000610b67565b565b662386f26fc1000034116104145760405162461bcd60e51b815260206004820152600f60248201526e139bc8115512081c9958d95a5d9959608a1b60448201526064015b60405180910390fd5b60405134815260009033907f509fb5d764cf5e98b9f02a3d86350f8085cedb516140098d2d6fc2eb6256ac249060200160405180910390a36000610467610462662386f26fc10000346110c2565b610bb7565b600354909150600160a01b900463ffffffff16606414610674576002546003546001600160a01b03918216916381b4e8b491662386f26fc1000091600160a01b820463ffffffff1691166104c2662386f26fc10000346110c2565b6040516001600160e01b031960e087901b16815263ffffffff9390931660048401526024830191909152604482015260640160206040518083038185885af1158015610512573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061053791906110d9565b5060055460035460408051336020820152808201869052606080820186905282518083039091018152608082019283905263fa31de0160e01b9092526000936001600160a01b039081169363fa31de01936105a69363ffffffff600160a01b84041693909216916084016110f2565b6020604051808303816000875af11580156105c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e991906110d9565b600654600354604051630237e58360e31b815260048101849052600160a01b90910463ffffffff16602482015261c35060448201523360648201529192506001600160a01b0316906311bf2c189034906084016000604051808303818588803b15801561065557600080fd5b505af1158015610669573d6000803e3d6000fd5b5050505050506106da565b60035460405163066ea9fb60e11b815260048101849052602481018390526001600160a01b0390911690630cdd53f690604401600060405180830381600087803b1580156106c157600080fd5b505af11580156106d5573d6000803e3d6000fd5b505050505b60405181815233907f1a24012c92bf6e7e16324dcf8754118d85847c33b1a9c9b7d44b650652d4b4119060200160405180910390a25050565b6040516323b872dd60e01b81523360048201523060248201526044810183905283906001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c919061115c565b6107ca5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161040b565b6001546000906001600160a01b038681169116146107ef576107ec8585610dd2565b90505b600354600160a01b900463ffffffff166064146109e7576002546003546001600160a01b03918216916381b4e8b491662386f26fc1000091600160a01b820463ffffffff1691166040516001600160e01b031960e086901b16815263ffffffff92909216600483015260248201526044810188905260640160206040518083038185885af1158015610885573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906108aa91906110d9565b5060055460035460408051336020820152808201879052606080820186905282518083039091018152608082019283905263fa31de0160e01b9092526000936001600160a01b039081169363fa31de01936109199363ffffffff600160a01b84041693909216916084016110f2565b6020604051808303816000875af1158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c91906110d9565b600654600354604051630237e58360e31b815260048101849052600160a01b90910463ffffffff16602482015261c35060448201523360648201529192506001600160a01b0316906311bf2c189034906084016000604051808303818588803b1580156109c857600080fd5b505af11580156109dc573d6000803e3d6000fd5b505050505050610a4d565b60035460405163066ea9fb60e11b815260048101859052602481018390526001600160a01b0390911690630cdd53f690604401600060405180830381600087803b158015610a3457600080fd5b505af1158015610a48573d6000803e3d6000fd5b505050505b6040518181526001600160a01b0386169033907f509fb5d764cf5e98b9f02a3d86350f8085cedb516140098d2d6fc2eb6256ac249060200160405180910390a35050505050565b610a9c610b0d565b6001600160a01b038116610b015760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161040b565b610b0a81610b67565b50565b6000546001600160a01b031633146103c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161040b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080610bc64261025861117e565b6040805160028082526060820183529293506000929091602083019080368337505060048054604080516315ab88c960e31b815290519495506001600160a01b039091169363ad5c46489350818301926020928290030181865afa158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5691906111ac565b81600081518110610c6957610c696111c9565b6001600160a01b0392831660209182029290920101526001805483519216918391908110610c9957610c996111c9565b6001600160a01b03928316602091820292909201015260048054604051637ff36ab560e01b81526000939190911691637ff36ab5918891610ce391600191889130918b9101611223565b60006040518083038185885af1158015610d01573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610d2a9190810190611258565b905060006001600160a01b03167f3a9a9f34f5831e9c8ecb66ab3aa308b2ff31eaca434615f6c9cadc656a9af71c82600081518110610d6b57610d6b6111c9565b602002602001015183600181518110610d8657610d866111c9565b6020026020010151604051610da5929190918252602082015260400190565b60405180910390a280600181518110610dc057610dc06111c9565b60200260200101519350505050919050565b60008281610de24261025861117e565b6004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018790529192509083169063095ea7b3906044016020604051808303816000875af1158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f919061115c565b506040805160028082526060820183526000926020830190803683370190505090508581600081518110610e9557610e956111c9565b6001600160a01b0392831660209182029290920101526001805483519216918391908110610ec557610ec56111c9565b6001600160a01b039283166020918202929092010152600480546040516338ed173960e01b815260009391909116916338ed173991610f0f918a91600191889130918b9101611316565b6000604051808303816000875af1158015610f2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f569190810190611258565b9050866001600160a01b03167f3a9a9f34f5831e9c8ecb66ab3aa308b2ff31eaca434615f6c9cadc656a9af71c82600081518110610f9657610f966111c9565b602002602001015183600181518110610fb157610fb16111c9565b6020026020010151604051610fd0929190918252602082015260400190565b60405180910390a280600181518110610feb57610feb6111c9565b602002602001015194505050505092915050565b6001600160a01b0381168114610b0a57600080fd5b60006020828403121561102657600080fd5b813561103181610fff565b9392505050565b60006020828403121561104a57600080fd5b813563ffffffff8116811461103157600080fd5b60006020828403121561107057600080fd5b5035919050565b60008060006060848603121561108c57600080fd5b833561109781610fff565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156110d4576110d46110ac565b500390565b6000602082840312156110eb57600080fd5b5051919050565b63ffffffff8416815260006020848184015260606040840152835180606085015260005b8181101561113257858101830151858201608001528201611116565b81811115611144576000608083870101525b50601f01601f19169290920160800195945050505050565b60006020828403121561116e57600080fd5b8151801515811461103157600080fd5b60008219821115611191576111916110ac565b500190565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156111be57600080fd5b815161103181610fff565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156112185781516001600160a01b0316875295820195908201906001016111f3565b509495945050505050565b84815260806020820152600061123c60808301866111df565b6001600160a01b03949094166040830152506060015292915050565b6000602080838503121561126b57600080fd5b825167ffffffffffffffff8082111561128357600080fd5b818501915085601f83011261129757600080fd5b8151818111156112a9576112a9611196565b8060051b604051601f19603f830116810181811085821117156112ce576112ce611196565b6040529182528482019250838101850191888311156112ec57600080fd5b938501935b8285101561130a578451845293850193928501926112f1565b98975050505050505050565b85815284602082015260a06040820152600061133560a08301866111df565b6001600160a01b039490941660608301525060800152939250505056fea2646970667358221220913e27074dbdcf827f294f372b8e740104e68e8eec7fa79242f0840f48992f6164736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80639a8a05921161008a578063d463227611610059578063d463227614610323578063e0964d1214610336578063efe75d8214610373578063f2fde38b1461039357600080fd5b80639a8a059214610259578063a179f12414610292578063ab83f98a146102d3578063bea9849e146102e657600080fd5b806382c947b7116100c657806382c947b7146101a9578063852759f2146101de5780638da5cb5b1461021b57806393f1a5f91461023957600080fd5b806311eac855146100f85780635d886f2214610135578063715018a614610174578063735de9f714610189575b600080fd5b34801561010457600080fd5b50600154610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014157600080fd5b50610172610150366004611014565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b005b34801561018057600080fd5b506101726103b3565b34801561019557600080fd5b50600454610118906001600160a01b031681565b3480156101b557600080fd5b506101d06101c4366004611014565b6001600160a01b031690565b60405190815260200161012c565b3480156101ea57600080fd5b506101726101f9366004611014565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b34801561022757600080fd5b506000546001600160a01b0316610118565b34801561024557600080fd5b50600254610118906001600160a01b031681565b34801561026557600080fd5b5060035461027d90600160a01b900463ffffffff1681565b60405163ffffffff909116815260200161012c565b34801561029e57600080fd5b506101726102ad366004611038565b6003805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b6101726102e136600461105e565b6103c7565b3480156102f257600080fd5b50610172610301366004611014565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610172610331366004611077565b610713565b34801561034257600080fd5b50610172610351366004611014565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b34801561037f57600080fd5b50600354610118906001600160a01b031681565b34801561039f57600080fd5b506101726103ae366004611014565b610a94565b6103bb610b0d565b6103c56000610b67565b565b662386f26fc1000034116104145760405162461bcd60e51b815260206004820152600f60248201526e139bc8115512081c9958d95a5d9959608a1b60448201526064015b60405180910390fd5b60405134815260009033907f509fb5d764cf5e98b9f02a3d86350f8085cedb516140098d2d6fc2eb6256ac249060200160405180910390a36000610467610462662386f26fc10000346110c2565b610bb7565b600354909150600160a01b900463ffffffff16606414610674576002546003546001600160a01b03918216916381b4e8b491662386f26fc1000091600160a01b820463ffffffff1691166104c2662386f26fc10000346110c2565b6040516001600160e01b031960e087901b16815263ffffffff9390931660048401526024830191909152604482015260640160206040518083038185885af1158015610512573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061053791906110d9565b5060055460035460408051336020820152808201869052606080820186905282518083039091018152608082019283905263fa31de0160e01b9092526000936001600160a01b039081169363fa31de01936105a69363ffffffff600160a01b84041693909216916084016110f2565b6020604051808303816000875af11580156105c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e991906110d9565b600654600354604051630237e58360e31b815260048101849052600160a01b90910463ffffffff16602482015261c35060448201523360648201529192506001600160a01b0316906311bf2c189034906084016000604051808303818588803b15801561065557600080fd5b505af1158015610669573d6000803e3d6000fd5b5050505050506106da565b60035460405163066ea9fb60e11b815260048101849052602481018390526001600160a01b0390911690630cdd53f690604401600060405180830381600087803b1580156106c157600080fd5b505af11580156106d5573d6000803e3d6000fd5b505050505b60405181815233907f1a24012c92bf6e7e16324dcf8754118d85847c33b1a9c9b7d44b650652d4b4119060200160405180910390a25050565b6040516323b872dd60e01b81523360048201523060248201526044810183905283906001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c919061115c565b6107ca5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161040b565b6001546000906001600160a01b038681169116146107ef576107ec8585610dd2565b90505b600354600160a01b900463ffffffff166064146109e7576002546003546001600160a01b03918216916381b4e8b491662386f26fc1000091600160a01b820463ffffffff1691166040516001600160e01b031960e086901b16815263ffffffff92909216600483015260248201526044810188905260640160206040518083038185885af1158015610885573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906108aa91906110d9565b5060055460035460408051336020820152808201879052606080820186905282518083039091018152608082019283905263fa31de0160e01b9092526000936001600160a01b039081169363fa31de01936109199363ffffffff600160a01b84041693909216916084016110f2565b6020604051808303816000875af1158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c91906110d9565b600654600354604051630237e58360e31b815260048101849052600160a01b90910463ffffffff16602482015261c35060448201523360648201529192506001600160a01b0316906311bf2c189034906084016000604051808303818588803b1580156109c857600080fd5b505af11580156109dc573d6000803e3d6000fd5b505050505050610a4d565b60035460405163066ea9fb60e11b815260048101859052602481018390526001600160a01b0390911690630cdd53f690604401600060405180830381600087803b158015610a3457600080fd5b505af1158015610a48573d6000803e3d6000fd5b505050505b6040518181526001600160a01b0386169033907f509fb5d764cf5e98b9f02a3d86350f8085cedb516140098d2d6fc2eb6256ac249060200160405180910390a35050505050565b610a9c610b0d565b6001600160a01b038116610b015760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161040b565b610b0a81610b67565b50565b6000546001600160a01b031633146103c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161040b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080610bc64261025861117e565b6040805160028082526060820183529293506000929091602083019080368337505060048054604080516315ab88c960e31b815290519495506001600160a01b039091169363ad5c46489350818301926020928290030181865afa158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5691906111ac565b81600081518110610c6957610c696111c9565b6001600160a01b0392831660209182029290920101526001805483519216918391908110610c9957610c996111c9565b6001600160a01b03928316602091820292909201015260048054604051637ff36ab560e01b81526000939190911691637ff36ab5918891610ce391600191889130918b9101611223565b60006040518083038185885af1158015610d01573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610d2a9190810190611258565b905060006001600160a01b03167f3a9a9f34f5831e9c8ecb66ab3aa308b2ff31eaca434615f6c9cadc656a9af71c82600081518110610d6b57610d6b6111c9565b602002602001015183600181518110610d8657610d866111c9565b6020026020010151604051610da5929190918252602082015260400190565b60405180910390a280600181518110610dc057610dc06111c9565b60200260200101519350505050919050565b60008281610de24261025861117e565b6004805460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018790529192509083169063095ea7b3906044016020604051808303816000875af1158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f919061115c565b506040805160028082526060820183526000926020830190803683370190505090508581600081518110610e9557610e956111c9565b6001600160a01b0392831660209182029290920101526001805483519216918391908110610ec557610ec56111c9565b6001600160a01b039283166020918202929092010152600480546040516338ed173960e01b815260009391909116916338ed173991610f0f918a91600191889130918b9101611316565b6000604051808303816000875af1158015610f2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f569190810190611258565b9050866001600160a01b03167f3a9a9f34f5831e9c8ecb66ab3aa308b2ff31eaca434615f6c9cadc656a9af71c82600081518110610f9657610f966111c9565b602002602001015183600181518110610fb157610fb16111c9565b6020026020010151604051610fd0929190918252602082015260400190565b60405180910390a280600181518110610feb57610feb6111c9565b602002602001015194505050505092915050565b6001600160a01b0381168114610b0a57600080fd5b60006020828403121561102657600080fd5b813561103181610fff565b9392505050565b60006020828403121561104a57600080fd5b813563ffffffff8116811461103157600080fd5b60006020828403121561107057600080fd5b5035919050565b60008060006060848603121561108c57600080fd5b833561109781610fff565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156110d4576110d46110ac565b500390565b6000602082840312156110eb57600080fd5b5051919050565b63ffffffff8416815260006020848184015260606040840152835180606085015260005b8181101561113257858101830151858201608001528201611116565b81811115611144576000608083870101525b50601f01601f19169290920160800195945050505050565b60006020828403121561116e57600080fd5b8151801515811461103157600080fd5b60008219821115611191576111916110ac565b500190565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156111be57600080fd5b815161103181610fff565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156112185781516001600160a01b0316875295820195908201906001016111f3565b509495945050505050565b84815260806020820152600061123c60808301866111df565b6001600160a01b03949094166040830152506060015292915050565b6000602080838503121561126b57600080fd5b825167ffffffffffffffff8082111561128357600080fd5b818501915085601f83011261129757600080fd5b8151818111156112a9576112a9611196565b8060051b604051601f19603f830116810181811085821117156112ce576112ce611196565b6040529182528482019250838101850191888311156112ec57600080fd5b938501935b8285101561130a578451845293850193928501926112f1565b98975050505050505050565b85815284602082015260a06040820152600061133560a08301866111df565b6001600160a01b039490941660608301525060800152939250505056fea2646970667358221220913e27074dbdcf827f294f372b8e740104e68e8eec7fa79242f0840f48992f6164736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 119,
        "contract": "contracts/SwapManager.sol:SwapManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 653,
        "contract": "contracts/SwapManager.sol:SwapManager",
        "label": "usdcToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 655,
        "contract": "contracts/SwapManager.sol:SwapManager",
        "label": "hypUSDCToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 657,
        "contract": "contracts/SwapManager.sol:SwapManager",
        "label": "multinate",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 659,
        "contract": "contracts/SwapManager.sol:SwapManager",
        "label": "chainId",
        "offset": 20,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 662,
        "contract": "contracts/SwapManager.sol:SwapManager",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPancakeRouter02)1598"
      },
      {
        "astId": 668,
        "contract": "contracts/SwapManager.sol:SwapManager",
        "label": "mailbox",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IMailbox)111"
      },
      {
        "astId": 674,
        "contract": "contracts/SwapManager.sol:SwapManager",
        "label": "igp",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IInterchainGasPaymaster)32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IInterchainGasPaymaster)32": {
        "encoding": "inplace",
        "label": "contract IInterchainGasPaymaster",
        "numberOfBytes": "20"
      },
      "t_contract(IMailbox)111": {
        "encoding": "inplace",
        "label": "contract IMailbox",
        "numberOfBytes": "20"
      },
      "t_contract(IPancakeRouter02)1598": {
        "encoding": "inplace",
        "label": "contract IPancakeRouter02",
        "numberOfBytes": "20"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}