{
  "language": "Solidity",
  "sources": {
    "@hyperlane-xyz/core/interfaces/IInterchainSecurityModule.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\ninterface IInterchainSecurityModule {\n    /**\n     * @notice Returns an enum that represents the type of security model\n     * encoded by this ISM.\n     * @dev Relayers infer how to fetch and format metadata.\n     */\n    function moduleType() external view returns (uint8);\n\n    /**\n     * @notice Defines a security model responsible for verifying interchain\n     * messages based on the provided metadata.\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\n     * the security model encoded by the module (e.g. validator signatures)\n     * @param _message Hyperlane encoded interchain message\n     * @return True if the message was verified\n     */\n    function verify(bytes calldata _metadata, bytes calldata _message)\n        external\n        returns (bool);\n}\n\ninterface ISpecifiesInterchainSecurityModule {\n    function interchainSecurityModule()\n        external\n        view\n        returns (IInterchainSecurityModule);\n}\n"
    },
    "@hyperlane-xyz/core/interfaces/IMailbox.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\nimport {IInterchainSecurityModule} from \"./IInterchainSecurityModule.sol\";\n\ninterface IMailbox {\n    function localDomain() external view returns (uint32);\n\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        bytes calldata _messageBody\n    ) external returns (bytes32);\n\n    function process(bytes calldata _metadata, bytes calldata _message)\n        external;\n\n    function count() external view returns (uint32);\n\n    function root() external view returns (bytes32);\n\n    function latestCheckpoint() external view returns (bytes32, uint32);\n\n    function recipientIsm(address _recipient)\n        external\n        view\n        returns (IInterchainSecurityModule);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IAttestationStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.15;\r\n\r\ninterface IAttestationStation {\r\n    function attestations(address creator, address about, bytes32 key) external view returns (bytes memory);\r\n}\r\n"
    },
    "contracts/Multinate.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.15;\r\n\r\nimport \"./interfaces/IAttestationStation.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@hyperlane-xyz/core/interfaces/IMailbox.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Multinate is Ownable {\r\n    IAttestationStation public attestationStation;\r\n    IERC20 public usdc;\r\n    uint256 public minimumAttestationScore;\r\n    address public swapManager;\r\n    IMailbox mailbox = IMailbox(0x35231d4c2D8B8ADcB5617A638A0c4548684c7C70);\r\n    bytes32 public constant REGISTRATION_KEY = keccak256(\"registration\");\r\n    bytes32 public constant TAX_EXEMPT_STATUS_KEY = keccak256(\"tax_exempt_status\");\r\n    bytes32 public constant FINANCIAL_STATEMENTS_KEY = keccak256(\"financial_statements\");\r\n    bytes32 public constant MISSION_STATEMENT_KEY = keccak256(\"mission_statement\");\r\n\r\n    mapping(address => uint256) public charityScores;\r\n    struct Campaign {\r\n        address payable charity;\r\n        string title;\r\n        string description;\r\n        uint256 targetAmount;\r\n        uint256 currentAmount;\r\n        uint256 deadline;\r\n        bool active;\r\n    }\r\n\r\n    uint256 public nextCampaignId = 1;\r\n\r\n    mapping(uint256 => Campaign) public campaigns;\r\n\r\n    event CampaignCreated(\r\n        uint256 indexed campaignId,\r\n        address indexed charity,\r\n        string title,\r\n        string description,\r\n        uint256 targetAmount,\r\n        uint256 deadline\r\n    );\r\n    event CharityEligibilityUpdated(address indexed charity, bool eligible);\r\n    event CampaignFunded(uint256 indexed campaignId, uint256 amount);\r\n    event Donated(uint32 origin, address indexed donor, uint256 indexed campaignId, uint256 amount);\r\n\r\n    constructor(address _attestationStation, uint256 _minimumAttestationScore, address _gnosisSafe, address _usdc) {\r\n        attestationStation = IAttestationStation(_attestationStation);\r\n        minimumAttestationScore = _minimumAttestationScore;\r\n        usdc = IERC20(_usdc);\r\n        transferOwnership(_gnosisSafe);\r\n    }\r\n\r\n    function setMinimumAttestationScore(uint256 _minimumAttestationScore) external {\r\n        minimumAttestationScore = _minimumAttestationScore;\r\n    }\r\n\r\n    function updateCharityScore(address _charity) external {\r\n        uint256 score = 0;\r\n\r\n        // Add a scoring system based on the attestation data\r\n        bytes memory registrationData = attestationStation.attestations(msg.sender, _charity, REGISTRATION_KEY);\r\n        score += calculateRegistrationScore(registrationData);\r\n        bytes memory taxExemptStatusData = attestationStation.attestations(msg.sender, _charity, TAX_EXEMPT_STATUS_KEY);\r\n        score += calculateTaxExemptStatusScore(taxExemptStatusData);\r\n        bytes memory financialStatementsData = attestationStation.attestations(\r\n            msg.sender,\r\n            _charity,\r\n            FINANCIAL_STATEMENTS_KEY\r\n        );\r\n        score += calculateFinancialStatementsScore(financialStatementsData);\r\n        bytes memory missionStatementData = attestationStation.attestations(\r\n            msg.sender,\r\n            _charity,\r\n            MISSION_STATEMENT_KEY\r\n        );\r\n        score += calculateMissionStatementScore(missionStatementData);\r\n        charityScores[_charity] = score;\r\n        bool isEligible = score >= minimumAttestationScore;\r\n        emit CharityEligibilityUpdated(_charity, isEligible);\r\n    }\r\n\r\n    function isCharityEligible(address _charity) public view returns (bool) {\r\n        return charityScores[_charity] >= minimumAttestationScore;\r\n    }\r\n\r\n    function calculateRegistrationScore(bytes memory _registrationData) internal pure returns (uint256) {\r\n        // Check if registration data is available\r\n        if (_registrationData.length > 0) {\r\n            // In this example, we assign 25 points for having registration data\r\n            return 25;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function calculateTaxExemptStatusScore(bytes memory _taxExemptStatusData) internal pure returns (uint256) {\r\n        // Check if tax-exempt status data is available\r\n        if (_taxExemptStatusData.length > 0) {\r\n            // In this example, we assign 25 points for having tax-exempt status data\r\n            return 25;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function calculateFinancialStatementsScore(bytes memory _financialStatementsData) internal pure returns (uint256) {\r\n        // Check if financial statements data is available\r\n        if (_financialStatementsData.length > 0) {\r\n            // In this example, we assign a score between 0 and 25 based on the financial transparency level\r\n            // (e.g., percentage of funds spent on the mission, administrative costs, etc.)\r\n            uint256 transparencyLevel = uint8(_financialStatementsData[0]);\r\n            return (transparencyLevel * 25) / 100;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function calculateMissionStatementScore(bytes memory _missionStatementData) internal pure returns (uint256) {\r\n        // Check if mission statement data is available\r\n        if (_missionStatementData.length > 0) {\r\n            // In this example, we assign a score between 0 and 25 based on the mission's alignment with global goals (e.g., UN SDGs)\r\n            uint256 alignmentScore = uint8(_missionStatementData[0]);\r\n            return (alignmentScore * 25) / 100;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function createCampaign(\r\n        address _charity,\r\n        string memory _title,\r\n        string memory _description,\r\n        uint256 _targetAmount,\r\n        uint256 _deadline\r\n    ) external {\r\n        require(isCharityEligible(_charity), \"The charity organization is not eligible\");\r\n        require(_deadline > block.timestamp, \"Deadline must be in the future\");\r\n        require(_targetAmount > 0, \"Target amount must be greater than zero\");\r\n\r\n        uint256 campaignId = nextCampaignId;\r\n        nextCampaignId++;\r\n\r\n        campaigns[campaignId] = Campaign({\r\n            charity: payable(_charity),\r\n            title: _title,\r\n            description: _description,\r\n            targetAmount: _targetAmount,\r\n            currentAmount: 0,\r\n            deadline: _deadline,\r\n            active: true\r\n        });\r\n\r\n        emit CampaignCreated(campaignId, _charity, _title, _description, _targetAmount, _deadline);\r\n    }\r\n\r\n    // Withdraw funds from the campaign\r\n    function withdraw(uint256 _campaignId) external {\r\n        Campaign storage campaign = campaigns[_campaignId];\r\n        require(campaign.active, \"Campaign is not active\");\r\n        require(campaign.charity == msg.sender, \"Only the charity can withdraw funds\");\r\n        require(campaign.currentAmount >= campaign.targetAmount, \"Target amount not reached\");\r\n        require(campaign.deadline < block.timestamp, \"Deadline has not passed yet\");\r\n\r\n        campaign.active = false;\r\n        usdc.transfer(campaign.charity, campaign.currentAmount);\r\n        // Emit event\r\n        emit CampaignFunded(_campaignId, campaign.currentAmount);\r\n    }\r\n\r\n    // Handle donations\r\n    function handle(uint32 _origin, bytes32 _sender, bytes memory _message) external {\r\n        require(msg.sender == address(mailbox), \"Only mailbox can call this function\");\r\n        // Decode the message\r\n        (address donor, uint256 campaignId, uint256 amount) = abi.decode(_message, (address, uint256, uint256));\r\n        Campaign storage campaign = campaigns[campaignId];\r\n        require(campaign.active, \"Campaign is not active\");\r\n        require(campaign.currentAmount + amount <= campaign.targetAmount, \"Target amount exceeded\");\r\n        require(campaign.deadline > block.timestamp, \"Deadline has passed\");\r\n        campaign.currentAmount += amount;\r\n        // Emit event\r\n        emit Donated(_origin, donor, campaignId, amount);\r\n    }\r\n\r\n    // Handle donations from the same chain\r\n    function donate(uint256 _campaignId, uint256 _amount) external {\r\n        // Require to be swapManager\r\n        require(msg.sender == swapManager, \"Only swapManager can call this function\");\r\n        // Require transfer of USDC tokens\r\n        require(usdc.transferFrom(msg.sender, address(this), _amount), \"USDC transfer failed\");\r\n        Campaign storage campaign = campaigns[_campaignId];\r\n        require(campaign.active, \"Campaign is not active\");\r\n        require(campaign.currentAmount + _amount <= campaign.targetAmount, \"Target amount exceeded\");\r\n        require(campaign.deadline > block.timestamp, \"Deadline has passed\");\r\n        campaign.currentAmount += _amount;\r\n        // Emit event\r\n        emit Donated(137, tx.origin, _campaignId, _amount);\r\n    }\r\n\r\n    // Set swapManager\r\n    function setSwapManager(address _swapManager) external {\r\n        swapManager = _swapManager;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}